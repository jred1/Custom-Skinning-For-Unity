#pragma kernel Similarity
#pragma kernel CoR

#pragma warning( disable: 4008 ) //prevents warning for the NaN definition
const static float NaN = 0.0f / 0.0f;
const static float WEIGHT_THRESHOLD = 0.0001;
const static int MAX_BONE_COUNT = 256;

uint _vertCount;
uint _triCount;
uint _boneCount;
float _sigma;

//input buffers
uniform RWStructuredBuffer<uint> _triIndices;
uniform RWStructuredBuffer<float4> _boneIDs;
uniform RWStructuredBuffer<float4> _weights;
uniform RWStructuredBuffer<float3> _vertPos;

//output buffers
RWStructuredBuffer<float> _similarity;
RWStructuredBuffer<float3> _opt_CoR;

//should this be changed to per vertex-triangle pair instead of per vertex
[numthreads(32,1,1)]
void Similarity (uint3 id : SV_DispatchThreadID)
{
    if (id.x < _vertCount){
        uint p_i = id.x;
        float w_p[4] = { _weights[p_i].x,
                    _weights[p_i].y,
                    _weights[p_i].z,
                    _weights[p_i].w };

        uint w_pIDs[4] = { (uint)(_boneIDs[p_i].x),
                    (uint)(_boneIDs[p_i].y),
                    (uint)(_boneIDs[p_i].z),
                    (uint)(_boneIDs[p_i].w) };

        // only computed if there is more than one bone for the given vertex
        if (w_p[1] > WEIGHT_THRESHOLD){
            
            uint t;
            for (t = 0; t < _triCount; t++){
                uint b,i,j,k;

                /*---INIT TRIANGLE WEIGHTS---*/
                float w_v[MAX_BONE_COUNT];
                // fill with bone weights
                uint bone_id,vert_id;
                for (i = 0; i < 3; i++){
                    for (j = 0; j < 4; j++){
                        vert_id = _triIndices[(t*3)+i];
                        bone_id = (uint)(_boneIDs[vert_id][j] + 0.1);
                        w_v[bone_id] += _weights[vert_id][j];
                    }
                }
                // average
                for (b = 0; b < _boneCount; b++){
                    w_v[b] = w_v[b]/3.0;
                }

                /*---COMPUTE SIMILARITY---*/
                float similarity = 0;
                for(j = 0; j < 4; j++){
                    for(k = 0; k < 4; k++){
                        //math: each term equals (w_pj * w_pk * w_vj * w_vk) * e^( -((w_pj * w_vk - w_pk * w_vj)^2)/(sigma^2) )
                        if (j != k){
                            float contribution = w_p[j] * w_p[k] * w_v[w_pIDs[j]] * w_v[w_pIDs[k]];
                            float distance = exp(-(pow(w_p[j] * w_v[w_pIDs[k]] - w_p[k] * w_v[w_pIDs[j]] ,2)/(_sigma*_sigma)));
                            similarity += contribution*distance;
                        }
                    }
                }
                _similarity[p_i*_triCount+t] = similarity;
            }
        }
        else{
            for (uint t = 0; t < _triCount; t++){
                _similarity[p_i*_triCount+t] = 0;
            }
        }
    }
}

[numthreads(32,1,1)]
void CoR (uint3 id : SV_DispatchThreadID)
{
    if (id.x < _vertCount){
        uint p_i = id.x;

        // only computed if there is more than one bone for the given vertex
        if (_weights[p_i].y > WEIGHT_THRESHOLD){
            // sum numerator and denominator separately
            float3 numerator = 0;
            float denominator = 0;
            float3 v1,v2,v3;
            float a;
            for (uint t = 0; t < _triCount; t++){
                // verts in the triangle
                v1 = _vertPos[_triIndices[(t*3)+0]];
                v2 = _vertPos[_triIndices[(t*3)+1]];
                v3 = _vertPos[_triIndices[(t*3)+2]];
                // area of the triangle
                a = length(cross(v1-v2,v1-v3))/2.0;

                numerator += _similarity[p_i*_triCount+t]*((v1+v2+v3)/3.0)*a;
                denominator += _similarity[p_i*_triCount+t]*a;
            }

            _opt_CoR[p_i] = numerator/denominator;
        }
        else{
            _opt_CoR[p_i] = float3(NaN,NaN,NaN); //will check during runtime process to ignore calculation for it
        }
    }
}